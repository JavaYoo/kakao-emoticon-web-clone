/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.78
 * Generated at: 2022-06-15 00:40:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.days01;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ex05_005f02_005fT_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

    // [ jsp 스크립트 : ] 
       // [ 스크립트릿 ] - 자바 코딩.   
       // 표현식        
       // 선언문        
   // ㄱ.  http://localhost/jspPro/days01/ex05_02.jsp
   // n 파라미터가 넘어오지 않으면  request.getParameter("n")  => null
   // ㄴ.  http://localhost/jspPro/days01/ex05_02.jsp?n
   //          request.getParameter("n")  =>   ""
   
   // [ jsp 기본 객체 ]
   // null 처리 해 줘야 해결..         
   String pn = request.getParameter("n");
   
   String content = "";
   if( pn != null ){
      int n =   Integer.parseInt( request.getParameter("n") ); 
      int sum = 0;
      for( int i=1; i<= n; i++ ){
         content += (   i == n ? i : i +  " + "  );
         sum += i;
      } // for
      content += " = " + sum;
   }

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>2022. 6. 14. - 오후 4:37:32</title>\r\n");
      out.write("<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"../images/SiSt.ico\">\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<h3>ex05_02.jsp</h3>\r\n");
      out.write("\r\n");
      out.write("<!-- action=\"\" 자기 자신 URL 호출 -->\r\n");
      out.write("<!-- \r\n");
      out.write("정수를 입력하고 엔터를 치면 서브밋(서버 제출) -> ex05_02.jsp 응답\r\n");
      out.write("\r\n");
      out.write("form의 action 속성을 설정하지 않았기에 같은 URL 호출\r\n");
      out.write("http://localhost/jspPro/days01/ex05_02.jsp?n=10\r\n");
      out.write(" -->\r\n");
      out.write("<form>\r\n");
      out.write("	<!-- \r\n");
      out.write("	질문) value = 상태값이 유지 X 이유 ?\r\n");
      out.write("			ex05_02.jsp -> submit -> 서버요청 ex05_02.jsp\r\n");
      out.write("			ex05_02.jsp\r\n");
      out.write("			\r\n");
      out.write("			value 속성값 유지 X == 상태관리 X\r\n");
      out.write("	-->\r\n");
      out.write("  정수 입력 : <input type=\"text\" name=\"n\" value=\"");
      out.print( pn == null ? "" : pn );
      out.write("\">\r\n");
      out.write("  <br>\r\n");
      out.write("  <span></span> \r\n");
      out.write(" <p id=\"demo\">\r\n");
      out.write(" ");

    if( pn != null ){
 
      out.write("\r\n");
      out.write("          ");
      out.print( content );
      out.write('\r');
      out.write('\n');
      out.write(' ');
               
    }
 
      out.write("\r\n");
      out.write("\r\n");
      out.write(" </p> \r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("  $(function (){\r\n");
      out.write("     $(\":text:first\")\r\n");
      out.write("         .focus()\r\n");
      out.write("         .select();\r\n");
      out.write("     \r\n");
      out.write("     $(\"form\").submit(function (){\r\n");
      out.write("        var pattern = /^\\d+$/\r\n");
      out.write("        // js  test()\r\n");
      out.write("        if (  pattern.test( $(\":text:first\").val() )  ) {   // 유효성 검사 성공\r\n");
      out.write("          return ;\r\n");
      out.write("        }\r\n");
      out.write("        // 유효성 검사 실패\r\n");
      out.write("        // $(\"form > span\")        \r\n");
      out.write("        $(\"span\", \"form\")\r\n");
      out.write("           .text(\"Not Valid\")\r\n");
      out.write("           .css(\"color\",\"red\")\r\n");
      out.write("           .show()\r\n");
      out.write("           .fadeOut(3000);\r\n");
      out.write("        event.preventDefault(); // 서브밋 취소\r\n");
      out.write("        \r\n");
      out.write("     });\r\n");
      out.write("  });\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
