/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.78
 * Generated at: 2022-06-23 08:37:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.days08;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ex09_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/C:/Class/JSPClass/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/jspPro/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/include.jspf", Long.valueOf(1655691494684L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1655356643006L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

    String contextPath = request.getContextPath();
    request.setCharacterEncoding("UTF-8");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>2022. 6. 23. - 오후 2:14:20</title>\r\n");
      out.write("<link rel=\"shortcut icon \"type = \"image/x-icon\" href = \"../images/SiSt.ico\">\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<h3>ex09.jsp</h3>\r\n");
      out.write("\r\n");
      out.write("<a href=\"");
      out.print( contextPath);
      out.write("/board/list.do\">제발 한번에 되라</a>\r\n");
      out.write("\r\n");
      out.write("<pre>\r\n");
      out.write("	[ 모델 2 구조 기반의 MVC 패턴 게시판 구현 ]  [ days05.board 게시판 구현 ]\r\n");
      out.write("	1. days08 폴더\r\n");
      out.write("		ㄴ board 폴더 생성\r\n");
      out.write("	2. web.xml X  +  Crtl + C > V + web_days07.xml\r\n");
      out.write("		web.xml \r\n");
      out.write("			ㄴ DBCP 설정 부분\r\n");
      out.write("	3. 모든 요청                   -> 단 하나의 서블릿 ( MV [ C ] 컨트롤러 )\r\n");
      out.write("		url-pattern=\"/\"       ->\r\n");
      out.write("		url-pattern=\"*.do\"  -> days08.mvc.controller.DispatcherServlet.java\r\n");
      out.write("		list.do\r\n");
      out.write("		write.do\r\n");
      out.write("		edit.do\r\n");
      out.write("		view.do\r\n");
      out.write("		???.do\r\n");
      out.write("	4. web.xml\r\n");
      out.write("		서블릿 ( 컨트롤러 ) 등록\r\n");
      out.write("		<load-on-startup>1</load-on-startup>\r\n");
      out.write("		1번쨰 요청 -> 서블릿 객체 생성 -> 응답\r\n");
      out.write("		요청 X      톰캣 ( WAS ) 시작될 때 서블릿 객체 생성 바로 응답할 수 있도록 하기 위해서\r\n");
      out.write("	5. DispatcherServlet 코딩\r\n");
      out.write("		a링크 요청               > get\r\n");
      out.write("        브라우저 주소창[] 요청 > get\r\n");
      out.write("        \r\n");
      out.write("    6. 설정 파일 선언 ( 추가 ) \r\n");
      out.write("    	요청 URL => 커맨드 핸들러 \r\n");
      out.write("    	요청 URL => 커맨드 핸들러 \r\n");
      out.write("    	WEB-INF 폴더\r\n");
      out.write("    		ㄴ commandHandler.properties\r\n");
      out.write("	7. 커맨드 핸들러 implements CommandHandler 인터페이스 오버라이딩\r\n");
      out.write("		days08.mvc.command.CommandHandler.java 인터페이스 선언\r\n");
      out.write("		days08.mvc.command.ListHandler.java\r\n");
      out.write("		days08.mvc.command.WriteHandler.java\r\n");
      out.write("		days08.mvc.command.EditHandler.java\r\n");
      out.write("		\r\n");
      out.write("	8. DispatcherServlet. init() 구현\r\n");
      out.write("		DispatcherServlet. doGet()\r\n");
      out.write("		\r\n");
      out.write("	9. /board/list.do 요청 -> ListHandler.process() 구현\r\n");
      out.write("		days05.board.List.java 코딩 복사해서 붙이기\r\n");
      out.write("	\r\n");
      out.write("	10. days08/board/list.jsp 확인\r\n");
      out.write("		 days05/board/list.jsp 복사 + 붙이기\r\n");
      out.write("		\r\n");
      out.write("	11. 테스트\r\n");
      out.write("	\r\n");
      out.write("	12. 글쓰기\r\n");
      out.write("		ㄱ. list.jsp\r\n");
      out.write("		<a href=\"");
      out.print(contextPath );
      out.write("/board/write.do\">글 쓰기</a>\r\n");
      out.write("		ㄴ. board/write.do (GET 방식)\r\n");
      out.write("			WriteHandler.java 코딩 수정\r\n");
      out.write("			doGet() write.jsp\r\n");
      out.write("		ㄷ.  days05/board/write.jsp 복사 + 붙이기\r\n");
      out.write("		\r\n");
      out.write("	13. list.jsp 하나의 게시글 제목을 클릭하면 상세보기 view.htm => view.jsp\r\n");
      out.write("		ㄱ. \r\n");
      out.write("		<td><a href=\"");
      out.print(contextPath);
      out.write("/board/view.do?seq=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ dto.seq }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write('"');
      out.write('>');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ dto.title }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</a></td>\r\n");
      out.write("		ㄴ. commandHandler perperties \r\n");
      out.write("			추가\r\n");
      out.write("		ㄷ.\r\n");
      out.write("	14. 	MVC 패턴 코딩하세요 ( 코딩 과제 ) \r\n");
      out.write("		수정하기\r\n");
      out.write("		 삭제하게\r\n");
      out.write("		 \r\n");
      out.write("		 [ 금 ]\r\n");
      out.write("		 필터\r\n");
      out.write("		 방명록 MVC 패턴\r\n");
      out.write("		 \r\n");
      out.write("		 토 / 일 DB 모델링 + 완료 !!\r\n");
      out.write("		 \r\n");
      out.write("		 ( 월 ) 답변형 게시판 + MVC\r\n");
      out.write("		  \r\n");
      out.write("		 화 - 2시간 ajax, json, char , map 등등\r\n");
      out.write("		 \r\n");
      out.write("		\r\n");
      out.write("</pre>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
