/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.78
 * Generated at: 2022-06-20 13:10:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.days05;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ex04_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/include.jspf", Long.valueOf(1655691494684L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');

    String contextPath = request.getContextPath();
    request.setCharacterEncoding("UTF-8");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>2022. 6. 20. - 오후 12:17:13</title>\r\n");
      out.write("<link rel=\"shortcut icon \"type = \"image/x-icon\" href = \"../images/SiSt.ico\">\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<h3>ex04.jsp</h3>\r\n");
      out.write("\r\n");
      out.write("<a href=\"");
      out.print(contextPath );
      out.write("/cstvsboard/list.htm\">게시판이다 쉑기야!</a>\r\n");
      out.write("\r\n");
      out.write("<pre>\r\n");
      out.write("1. sqldeveloper 실행 + SCOTT 계정 접속\r\n");
      out.write("2. tbl_cstvsboard 테이블 생성\r\n");
      out.write("	seq_tbl_cstvsboard 시퀀스 생성\r\n");
      out.write("	\r\n");
      out.write("3. days05폴더 안에 board 폴더 생성\r\n");
      out.write("4. days05.board 패키지 생성\r\n");
      out.write("	ㄱ. BoardDTO\r\n");
      out.write("	ㄴ. BoardDAO\r\n");
      out.write("	ㄷ. BoardDAOImpl\r\n");
      out.write("	\r\n");
      out.write("5.  /jspPro/cstvsboard/list.htm -> 서블릿 클래스 List.java 추가 -> days05/board/list.jsp 포워딩.\r\n");
      out.write("6. /jspPro/cstvsboard/write.htm -> 글쓰기 링크태그 클릭\r\n");
      out.write("		Write.java   doGet(){}   -> 포워딩   write.jsp\r\n");
      out.write("6-2. write.jsp\r\n");
      out.write("		새 게시글 정보 입력 한 후       \" 작성완료 \" 버튼 클릭 ->\r\n");
      out.write("		/jspPro/cstvsboard/write.htm  +  POST  ->  Write.java 서블릿\r\n");
      out.write("		-> doPost(){\r\n");
      out.write("			dao.새 게시글 쓰기 () DB 저장\r\n");
      out.write("		}\r\n");
      out.write("7. 페이징 처리   << 1     2 3 4 5 6 7 8 9 10 >>\r\n");
      out.write("              이전버튼  시작                           끝  다음버튼   true\r\n");
      out.write("   PageBlock.java 클래스 선언\r\n");
      out.write("   \r\n");
      out.write("	내일 코딩 X 로직 처리 시험 \r\n");
      out.write("8. 내일 6/21\r\n");
      out.write("	1) 글 목록에서 글번호의 제목을 클릭하면 -> 글 상세보기\r\n");
      out.write("	2) 글 상세보기\r\n");
      out.write("	3) 글 수정\r\n");
      out.write("	4) 글 삭제\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("</pre>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
