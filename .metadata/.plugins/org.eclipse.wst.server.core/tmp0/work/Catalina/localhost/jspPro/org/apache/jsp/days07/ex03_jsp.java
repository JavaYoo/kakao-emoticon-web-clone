/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.78
 * Generated at: 2022-06-22 02:57:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.days07;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.util.ConnectionProvider;
import javax.naming.Context;
import javax.sql.DataSource;
import java.sql.Connection;
import javax.naming.InitialContext;

public final class ex03_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Class/JSPClass/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/jspPro/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1655356643006L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("javax.naming.InitialContext");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("javax.sql.DataSource");
    _jspx_imports_classes.add("javax.naming.Context");
    _jspx_imports_classes.add("com.util.ConnectionProvider");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>2022. 6. 22. - 오전 10:54:00</title>\r\n");
      out.write("<link rel=\"shortcut icon \"type = \"image/x-icon\" href = \"../images/SiSt.ico\">\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<h3>ex03.jsp</h3>\r\n");
      out.write("\r\n");
      out.write("<pre>\r\n");
      out.write("	*** 1. 커넥션 풀 ( pool )  p 415 ***\r\n");
      out.write("	JSP 요청 + DB 연동 처리 + Connection 객체 생성, 닫기 + 동시 접속자가 많다면\r\n");
      out.write("	                                    성능 떨어짐.\r\n");
      out.write("	응답 늦어진다.\r\n");
      out.write("\r\n");
      out.write("	=> 커넥션풀 ? \r\n");
      out.write("	\r\n");
      out.write("		역삼역 + 자차 ( 술 ) + 대리기사 \r\n");
      out.write("		          천막 [ 대리기사 , 대리기사 , 대리기사 , 대리기사 , 대리기사 , 대리기사] 기법 == 커넥션 풀 기법\r\n");
      out.write("		          \r\n");
      out.write("	ㄱ. DBCP를 이용한 커넥션 풀 사용하는 방법\r\n");
      out.write("		https://commons.apache.org/ 		3파일 다운로드 lib 폴더 추가\r\n");
      out.write("		\r\n");
      out.write("	*** ㄴ. 톰캣( WAS )를 이용하는 커넥션 풀 사용하는 방법 ***\r\n");
      out.write("		1) tomcat-dbcp.jar 파일을 찾아서 WEB-INF/lib 폴더 복사 붙이기\r\n");
      out.write("		2) 커넥션 풀 초기화 설정\r\n");
      out.write("			https://commons.apache.org/ 설정 메뉴얼 찾아서 사용.\r\n");
      out.write("			https://tomcat.apache.org/tomcat-8.5-doc/jndi-datasource-examples-howto.html#Oracle_8i,_9i_&_10g\r\n");
      out.write("			META-INF 폴더\r\n");
      out.write("					ㄴ context.xml 추가\r\n");
      out.write("					\r\n");
      out.write("					<Context>\r\n");
      out.write("						<Resource \r\n");
      out.write("								name=\"jdbc/myoracle\"\r\n");
      out.write("								auth=\"Container\"\r\n");
      out.write("						        type=\"javax.sql.DataSource\" \r\n");
      out.write("						        \r\n");
      out.write("						        driverClassName=\"oracle.jdbc.OracleDriver\"\r\n");
      out.write("						        url=\"jdbc:oracle:thin:@127.0.0.1:1521:xe\"\r\n");
      out.write("						        username=\"scott\"\r\n");
      out.write("						        password=\"tiger\"\r\n");
      out.write("						        \r\n");
      out.write("						        maxTotal=\"20\"  커넥션 풀 안에 최대 생성할 커넥션 객체의 수\r\n");
      out.write("						        maxIdle=\"10\"   커넥션 풀이 보관할 수 있는 최대 유휴(일을 안하고 있는) 객체 수  (대기)\r\n");
      out.write("						        maxWaitMillis=\"-1\"/>   \r\n");
      out.write("						</Context>\r\n");
      out.write("	                    [    C, C, C, C, C, C, C, C, C, C    ]\r\n");
      out.write("	                    \r\n");
      out.write("	         		   ㄷ. web.xml 추가\r\n");
      out.write("	         		   	<resource-ref>\r\n");
      out.write("							<description>Oracle Datasource example</description>\r\n");
      out.write("							<res-ref-name>jdbc/myoracle</res-ref-name>\r\n");
      out.write("							<res-type>javax.sql.DataSource</res-type>\r\n");
      out.write("							<res-auth>Container</res-auth>\r\n");
      out.write("						</resource-ref>\r\n");
      out.write("						ㄹ. com.util.클래스.java - DBCP 커넥션 객체 반환하는 메서드\r\n");
      out.write("						com.util.ConnectionProvider\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	2. 세션 ( session ) p 232 Chapter 10 클라이언트와의 대화 : 세션\r\n");
      out.write("	3. JSTL\r\n");
      out.write("	4. EL\r\n");
      out.write("	5. MVC\r\n");
      out.write("</pre>\r\n");
      out.write("\r\n");

	Context initContext = new InitialContext();
	Context envContext  = (Context)initContext.lookup("java:/comp/env");
	DataSource ds = (DataSource)envContext.lookup("jdbc/myoracle");
	Connection conn = ds.getConnection();

      out.write("\r\n");
      out.write("\r\n");
      out.write("DBCP conn = ");
      out.print( conn );
      out.write("<br>\r\n");
      out.write("\r\n");

	conn.close(); // 자동으로 커넥션 풀 반환

      out.write("\r\n");
      out.write("\r\n");
      out.write("DBCP conn2 =");
      out.print( ConnectionProvider.getConnection() );
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
