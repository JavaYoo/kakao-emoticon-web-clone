package days08.mvc.command;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.util.DBconn;

import days05.board.BoardDAOImpl;
import days05.board.BoardDTO;
import days05.board.PageBlock;

public class ListHandler implements CommandHandler{

	@Override
	public String process(HttpServletRequest request, HttpServletResponse response) throws Exception {
		// days05.board.List.java
		
		int currentPage = 1; //현재 페이지
		int numberPerPage = 10; //한 페이지에 출력할 게시글 수
		int numberOfPageBlock = 10; //페이징 블럭 수
		
		ArrayList<BoardDTO> list = null;

		// 페이징 처리
		int totalRecords, totalPages = 0;
		
		Connection conn = DBconn.getConnection();
		BoardDAOImpl dao = new BoardDAOImpl(conn);
		int searchCondition = 1;
		String searchWord = "";
		
		try {
			try {
			currentPage = Integer.parseInt(request.getParameter("currentpage"));
			}catch(Exception e){
				
			}
			
			try {
				searchCondition = Integer.parseInt(request.getParameter("searchCondition"));
			}catch(Exception e){
				
			}
			searchWord = request.getParameter("searchWord") == null ? "": request.getParameter("searchWord");
			
			if(searchWord.equals("")) {//검색하기 X
				list = dao.select(currentPage, numberPerPage);
				totalRecords = dao.getTotalRecords();
				totalPages = dao.getTotalPages(numberPerPage);
				
			}else {	//검색하기
				list = dao.search(currentPage, numberPerPage, searchCondition, searchWord);
				totalPages = dao.getTotalPages(numberPerPage, searchCondition, searchWord);
			}
					
			
		}catch(SQLException e) {
			System.out.println(">List.doGet() Exception");
		}
		DBconn.close();
		
		request.setAttribute("list", list);
		
		// 페이징 처리 부분
		PageBlock pageBlock = new PageBlock();
		pageBlock.setCurrentPage(currentPage);
		pageBlock.setNumberPerPage(numberPerPage);
		pageBlock.setNumberOfPageBlock(numberOfPageBlock);
		int startOfPageBlock = 1;
        int endOfPageBlock ;
        // ****
        startOfPageBlock = (currentPage -1) /numberOfPageBlock * numberOfPageBlock +1 ;
        endOfPageBlock = startOfPageBlock + numberOfPageBlock -1;
        if(  endOfPageBlock > totalPages ) endOfPageBlock = totalPages;
		
        pageBlock.setStartOfPageBlock(startOfPageBlock);
		pageBlock.setEndOfPageBlock(endOfPageBlock);
		
		if (startOfPageBlock != 1) pageBlock.setPrev(true);
		if (endOfPageBlock != totalPages) pageBlock.setNext(true);
		
		request.setAttribute("pageBlock", pageBlock);
		
		return "list.jsp";
	}

}
